#include <ros/ros.h>
#include <casadi/casadi.hpp>
#include <Eigen/Eigen>
#include "TrajectoryOptimization/TrajectoryOptimization.h"

int main(int argc, char **argv)
{
    ros::init(argc, argv, "run_trajectory_optimization");
    ros::NodeHandle nh;

    
    std::vector<std::vector<double>> AFb_array;
    std::vector<std::vector<double>> x0,u0;
    std::vector<double> x = {0,0,-0.0242219208582111,-0.337602080265699,-0.693089520089360,-1.04561275752967,-1.34828196291863,-1.56855052452559,-1.68157283479397,-1.37906177384120,-0.445221834770686,1.08095460291699,2.98540380266899,4.94385986039581,6.50930222829122,7.55429829067929,8.40960491960969,9.21365416340928,9.85691337619049,10.3780853584263,10.3859667654349,10.1266985369806};
    std::vector<double> y = {0,0.937711509523626,1.94659226618929,2.86090253606495,3.71410452142603,4.63738660939988,5.62748915868487,6.70645467836845,8.17887745471555,10.1024570867412,11.8581050110406,13.1342431753358,13.6981738272432,13.5134792843607,12.8492871008375,12.1718497115131,11.5451016286096,10.9528503787036,10.5062195713775,10.9071733694312,10.9149874331752,10.0719789781483};
    std::vector<double> theta = {1.57079632679490,1.59480042076131,1.90099811329635,1.96557407675621,1.93552863539894,1.86746948930138,1.77217706684269,1.64740551640309,1.41480927827157,1.08195078298993,0.696408194575417,0.287886204606431,-0.0940281037972265,-0.401264051103776,-0.575156602632025,-0.632386244474319,-0.634860595347782,-0.606906923841263,0.655758636640302,0.781107572931975,1.27242634040679,1.72310132839321};
    std::vector<double> v = {1,1,1,1,1,0.997397867081823,0.997397867081820,0.999186460177670,1.00000000000000,1.00000000000000,0.997397867081820,0.997397867081822,0.997397867081819,0.997397867081823,0.997397867081821,0.994095561085353,1.04784854854336,1.04784854854336,1.03040636579924,0.0180622674592905,1.04784854854336};
    std::vector<double> omega = {0,0,0,0,0,-0.250000000000000,-0.250000000000000,-0.125000000000000,0,0,-0.250,-0.250,-0.250,-0.250,-0.250,-0.245438253363631,0.530109563340908,0.530109563340908,0.521078398919661,0.00903116442124663,0.530109563340908};
    for(int i = 0; i < x.size(); ++i){
        x0.push_back({x[i],y[i],theta[i]});
    }
    for(int i = 0; i < v.size(); ++i){
        u0.push_back({v[i],omega[i]});
    }
    for(int i = 0; i < x.size(); ++i){
        AFb_array.push_back({5,6,M_PI/6,3,5});
    }
    TrajectoryOptimization trajectory_optimization(3,2,1,x.size());
    trajectory_optimization.AFb_Init(AFb_array);
    trajectory_optimization.MX_Init();
    trajectory_optimization.Add_Constraints(-10.0,10.0,-10.0,10.0,0.0,5.0,-1.0,1.0,1.0);
    trajectory_optimization.Warm_Start(x0,u0);
    // trajectory_optimization.Solve();
    return 0;
}